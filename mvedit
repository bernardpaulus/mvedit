#!/bin/bash
# TODO:
# - git/svn support
# - whitespace lines as delete?
# - editor switch in options (use nano if no $EDITOR value is not set)
# - improve performance: printlineat is quite the ugly thing
if [ "$1" == "-h" -o "$1" == "-help" -o "$1" == "--help" ]
then 
    echo "moves multiple files at once by letting you edit the directory listing"
    echo "a listing of the current directory will be shown." 
    echo "You can edit that listing, so that"
    echo "each file is moved to the new filename present on the line"
    echo "empty line definitively deletes a file"
    echo "THIS VERSION DOESN'T SUPPORT FILE INTERCHANGE"
    echo "option -q, --quiet suppresses most of the output"
    exit 0
fi

quiet="false"
if [ "$1" == "-q" -o "$1" == "--quiet" ]
then 
    quiet="true"
fi

if [ ! -x "$EDITOR" ]
then
    echo "\$EDITOR should be set to your preferred editor"
    echo "you can set it with"
    echo "export EDITOR=YOUR_EDITOR"
    exit -1
fi

# rm file or empty directories
function rmdir_or_rm() { 
    if [ -d "$1" ] 
    then rmdir "$1" 
    else rm "$1" 
    fi 
}

# create a unique directory and returns it's name in $dirname
function unique_dir() { 
    if [ -w . ]  
    then if [ ! -e "$1" ]
        then
            mkdir --mode=700 "$1" && dirname="$1" 
        else
            unique_dir "$1$RANDOM"
        fi
    else
        mkdir "$1" # fail and print error
    fi
}
dirname=""


# prints line of file $1 at line $2
function printlineat {
     cat -n "$1" | awk "\$1 == $2 {print;}" | cut --complement --fields=1
}

tmpfile="/tmp/mveditsource$RANDOM.tmp"
editfilename="mvedit_edit$RANDOM.tmp"
editfile="/tmp/$editfilename"
backup_on_error="$editfilename.bak"
MV_COMMAND="mv -i"
RM_COMMAND="rmdir_or_rm"

ls -1A > "$tmpfile"
cp "$tmpfile" "$editfile"
$EDITOR "$editfile"

unique_dir "mvedit_clean_dir$RANDOM"
if [ -n "$dirname" ]
then clean_dir="$dirname"
else exit -1
fi
nlinestmp=`wc -l "$tmpfile" | awk '{print $1}'`
nlinesedit=`wc -l "$editfile" | awk '{print $1}'`
if [ $nlinestmp -eq $nlinesedit ]
then
    for i in `seq 1 $nlinesedit`
    do
        orig=`printlineat $tmpfile $i`
        target=`printlineat $editfile $i`
        if [ "$orig" != "$target" ]
        then
            if [ "$target" == "" ]
            then 
                [ "$quiet" == "false" ] && echo "$i/$nlinesedit: RM $orig"
                $RM_COMMAND "$orig"
            else
                [ "$quiet" == "false" ] && echo "$i/$nlinesedit: MV $orig $target"
                # move to clean dir to avoid conflicts with filename exchanges
                # but stay on the current filesystem
                $MV_COMMAND "$orig" "$clean_dir/$target"
            fi
        fi
    done
else
    echo "Error: file lengths don't match! Empty line to delete a file."
    cp "$editfile" "$backup_on_error"
    echo "> Saved your version in $backup_on_error"
fi

if [ -n "$(ls -A $clean_dir)" ]
then 
    for f in "$clean_dir/."* "$clean_dir/"*
    do 
        if [ "$f" != "$clean_dir/." -a "$f" != "$clean_dir/.." ]
        then $MV_COMMAND "$f" . 
        fi
    done
fi

if [ -z "$(ls -A $clean_dir)" ]
then rmdir "$clean_dir"
else echo "files that should have overwritten files are in $clean_dir/"
fi

rm $tmpfile $editfile

